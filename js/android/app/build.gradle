apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

// TODO: remove this after closed beta
apply plugin: 'com.google.gms.google-services'

import com.android.build.OutputFile

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/react-native-codegen
    // codegenDir = file("../node_modules/react-native-codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to create four separate APKs instead of one,
 * one for each native architecture. This is useful if you don't
 * use App Bundles (https://developer.android.com/guide/app-bundle/)
 * and want to have separate APKs to upload to the Play Store.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Private function to get the list of Native Architectures you want to build.
 * This reads the value from reactNativeArchitectures in your gradle.properties
 * file and works together with the --active-arch-only flag of react-native run-android.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "tech.berty.android"
    defaultConfig {
        applicationId "tech.berty.android"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        missingDimensionStrategy 'react-native-camera', 'general'
        multiDexEnabled true // fix for "The number of method references in a .dex file cannot exceed 64K"
        vectorDrawables.useSupportLibrary = true // needed for image picker

        def addEnvVar = {key ->
            def value = getEnvValue(key)
            manifestPlaceholders += [(key):value]
            buildConfigField "String", "${key}", "\"${value}\""
        }

        def generateVersionCode = {
            def cwd = rootDir.getParentFile().getParentFile() // Berty repo root dir
            def platform = System.properties['os.name'].toLowerCase().contains('windows') ? "Windows" : "Unix"
            def err
            try {
                def proc = "${platform == "Windows" ? "PowerShell -Command" : ""} git rev-list HEAD --count".execute(null, cwd)
                err = proc.err.text.trim()
                def out = proc.text.trim()
                if (!out.isEmpty()) {
                    if (out.isInteger()) {
                        return out.toInteger()
                    }
                    err = "can't convert version code to integer: <${out}>"
                }
            } catch (Exception e) {
                err = e.toString()
            }
            throw new RuntimeException("Could not generate versionCode (platform ${platform}): ${err}")
        }

        def generateVersionName = {
            def cwd = rootDir.getParentFile().getParentFile() // Berty repo root dir
            def platform = System.properties['os.name'].toLowerCase().contains('windows') ? "Windows" : "Unix"
            def err
            try {
                def proc = "${platform == "Windows" ? "PowerShell -Command" : ""} go run -mod=readonly github.com/mdomke/git-semver/v5".execute(null, cwd)
                err = proc.err.text.trim()
                def out = proc.text.trim()
                if (!out.isEmpty()) {
                    out = out.substring(1)
                    out = out.split('-')[0]
                    return out
                }
            } catch (Exception e) {
                err = e.toString()
            }
            throw new RuntimeException("Could not generate versionName (platform ${platform}): ${err}")
        }

        versionCode generateVersionCode()
        versionName generateVersionName()
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include (*reactNativeArchitectures())
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug
            buildConfigField "boolean", "DEBUG_LOGS", "true"
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            buildConfigField "boolean", "DEBUG_LOGS", "false"
        }
        releaseStaff {
            initWith release
            applicationIdSuffix ".staff"
            matchingFallbacks = ['release']
            buildConfigField "boolean", "DEBUG_LOGS", "true"
        }
        releaseYolo {
            initWith release
            applicationIdSuffix ".yolo"
            matchingFallbacks = ['release']
            buildConfigField "boolean", "DEBUG_LOGS", "true"
        }
    }
    
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride = defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }

        }
    }

    packagingOptions {
        // Make sure libjsc.so does not packed in APK
        exclude "**/libjsc.so"
    }
}

// Auto-build gomobile.aar by running Makefile rule
task makeDeps(description: 'Build gomobile.aar (Berty go core)') {
    outputs.files fileTree(dir: "${rootDir.getPath()}/libs", include: ["*.jar", "*.aar"])

    doLast {
        if (System.properties['os.name'].toLowerCase().contains('windows')) {
            logger.warn("Warning: can't run make on Windows, you must build gomobile.aar manually")
            return
        }

        def checkMakeInPath = exec {
            standardOutput = new ByteArrayOutputStream() // equivalent to '> /dev/null'
            ignoreExitValue = true
            commandLine 'bash', '-l', '-c', 'command -v make'
        }

        if (checkMakeInPath.getExitValue() == 0) {
            exec {
                def makefileDir = "${rootDir.getPath()}/.."
                workingDir makefileDir
                environment 'PWD', makefileDir
                commandLine 'make', 'android.app_deps'
            }
        } else {
            logger.warn('Warning: make command not found in PATH')
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation('com.facebook.react:react-android')

    // firebase fcm
    implementation platform('com.google.firebase:firebase-bom:28.1.0')
    implementation('com.google.firebase:firebase-messaging')

    // Add v8-android - prebuilt libv8android.so into APK
    implementation('org.chromium:v8-android:9.88.+')

    implementation('androidx.viewpager2:viewpager2:1.0.0')

    implementation('com.facebook.fresco:animated-gif:2.0.0') // For animated GIF support

    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.0.0")

    implementation project(':react-native-share')

    // Add Android Nearby
    implementation('com.google.android.gms:play-services-nearby:16.0.0')
    implementation('com.google.android.gms:play-services-location:17.0.0')
    implementation('androidx.lifecycle:lifecycle-process:2.3.1')

    // Add keystore, 1.1 is required to use the MasterKey class
    implementation('androidx.security:security-crypto:1.1.0-alpha03')

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    implementation makeDeps.outputs.files
}

apply from: file('../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle'); applyNativeModulesAppBuildGradle(project)


project.ext.vectoricons = [
    iconFontNames: [ 'Feather.ttf' ] // Name of the font files you want to copy
]

apply from: '../../node_modules/react-native-vector-icons/fonts.gradle'
